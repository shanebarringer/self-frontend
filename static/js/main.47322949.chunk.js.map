{"version":3,"sources":["images/GiantRobotLTD_Logo.svg","components/FormInput.js","components/Dialog.js","components/Form.js","components/App.js","serviceWorker.js","index.js","images/White_Arrow.svg"],"names":["module","exports","colors","inputBase","css","error","errorText","FormInput","val","submit","labelText","name","formBase","handleFormUpdate","err","length","htmlFor","toUpperCase","type","value","style","background","onChange","Dialog","firstName","lastName","address","addressTwo","successHandler","buttonBase","modalButton","toggleDialog","onClick","e","preventDefault","initialData","formButton","Form","useState","data","updateData","dialog","target","onSubmit","notEmpty","Object","values","slice","every","src","arrow","alt","visible","onClose","welcome","imageStyle","formStyle","App","Logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47322949.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GiantRobotLTD_Logo.e533bd92.svg\";","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\n\nconst FormInput = ({\n  val,\n  submit,\n  labelText,\n  name,\n  formBase,\n  handleFormUpdate\n}) => {\n  const err = submit && !val.length;\n\n  return (\n    <div>\n      <label htmlFor={name} css={err ? errorText : \"\"}>\n        {labelText.toUpperCase()}\n      </label>\n      <br />\n      <input\n        type=\"text\"\n        name={name}\n        value={val}\n        css={[formBase, inputBase, err ? error : \"\"]}\n        style={{ background: val.length ? \"#fff\" : \"\" }}\n        onChange={handleFormUpdate}\n      />\n    </div>\n  );\n};\n\nconst colors = {\n  border: \"#00ADEE\",\n  label: \"#666666\",\n  idle: \"#F7F7F7\",\n  err: \"#E70000\"\n};\n\nconst inputBase = css`\n  background-color: ${colors.idle};\n  color: ${colors.label};\n  border: 1px solid ${colors.idle};\n  &:focus {\n    outline: 0;\n    border: 1px solid ${colors.border};\n    background-color: #fff;\n  }\n`;\n\nconst error = css`\n  border: 1px solid ${colors.err};\n  background-color: #fff;\n`;\n\nconst errorText = css`\n  ::after {\n    content: \" REQUIRED\";\n    color: ${colors.err};\n  }\n`;\n\nexport default FormInput;\n","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\n\nconst Dialog = ({\n  firstName,\n  lastName,\n  address,\n  addressTwo,\n  successHandler,\n  buttonBase,\n  modalButton,\n  toggleDialog\n}) => (\n  <div>\n    <h3>Thanks!</h3>\n    <p> Please confirm the following data is correct: </p>\n    <div>\n      Name: {firstName} {lastName}\n    </div>\n    <div>\n      Address: {address} {addressTwo}\n    </div>\n    <button css={buttonBase} onClick={successHandler}>\n      Yes!\n    </button>\n    <button\n      css={[buttonBase, modalButton]}\n      onClick={e => {\n        e.preventDefault();\n        toggleDialog(false);\n      }}>\n      Hang On!\n    </button>\n  </div>\n);\n\nexport default Dialog;\n","import { useState } from \"react\";\n/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport Rodal from \"rodal\";\nimport FormInput from \"./FormInput\";\nimport Dialog from \"./Dialog\";\nimport arrow from \"../images/White_Arrow.svg\";\nimport \"rodal/lib/rodal.css\";\n\nconst initialData = {\n  firstName: \"\",\n  lastName: \"\",\n  address: \"\",\n  addressTwo: \"\",\n  submit: false\n};\n\nconst Form = () => {\n  const [data, updateData] = useState(initialData);\n  const [dialog, toggleDialog] = useState(false);\n\n  const handleFormUpdate = e => {\n    updateData({ ...data, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const valueSlice = Object.values(data).slice(0, -2);\n\n    const notEmpty = valueSlice.every(val => val.length);\n\n    data.submit && notEmpty\n      ? toggleDialog(true)\n      : updateData({ ...data, submit: true });\n  };\n\n  const successHandler = e => {\n    e.preventDefault();\n    updateData({ ...initialData });\n    toggleDialog(false);\n  };\n\n  const { firstName, lastName, address, addressTwo, submit } = data;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormInput\n        val={firstName}\n        name=\"firstName\"\n        submit={submit}\n        labelText=\"First Name\"\n        formBase={formBase}\n        handleFormUpdate={handleFormUpdate}\n      />\n      <FormInput\n        val={lastName}\n        name=\"lastName\"\n        submit={submit}\n        labelText=\"Last Name\"\n        formBase={formBase}\n        handleFormUpdate={handleFormUpdate}\n      />\n      <FormInput\n        val={address}\n        name=\"address\"\n        submit={submit}\n        labelText=\"Address\"\n        formBase={formBase}\n        handleFormUpdate={handleFormUpdate}\n      />\n      <FormInput\n        val={addressTwo}\n        name=\"addressTwo\"\n        submit={false}\n        labelText=\"Address 2 (optional)\"\n        formBase={formBase}\n        handleFormUpdate={handleFormUpdate}\n      />\n\n      <button type=\"submit\" css={[formBase, buttonBase, formButton]}>\n        Next <img src={arrow} alt=\"arrow\" />\n      </button>\n      <Rodal visible={dialog} onClose={successHandler}>\n        <Dialog\n          firstName={firstName}\n          lastName={lastName}\n          address={address}\n          addressTwo={addressTwo}\n          successHandler={successHandler}\n          buttonBase={buttonBase}\n          modalButton={modalButton}\n          toggleDialog={toggleDialog}\n        />\n      </Rodal>\n    </form>\n  );\n};\n\nconst formBase = css`\n  font: 14px Roboto;\n  margin: 12px auto;\n  padding-left: 16px;\n  width: 80%;\n  height: 48px;\n  border-radius: 6px;\n`;\n\nconst buttonBase = css`\n  background: #FFAB44;\n  margin-top: 22px;\n  font-size 16px;\n  color: #fff;\n  border: none;\n  outline: none;\n`;\n\nconst formButton = css`\n  margin-top: 48px;\n  font-size 16px;\n  font-weight: 700;\n   @media (min-width: 1200px) {\n    width: initial;\n    padding: 0 24px;\n    display: inline-block;\n  }\n`;\n\nconst modalButton = css`\n  margin-left: 22px;\n`;\n\nexport default Form;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport Form from \"./Form\";\n\nimport Logo from \"../images/GiantRobotLTD_Logo.svg\";\nimport \"../styles/App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <div css={welcome}>\n        <img css={imageStyle} src={Logo} alt=\"Giant Robot LTD logo\" />\n        <h1>Welcome</h1>\n        <p>Please tell us a bit about yourself to get started</p>\n      </div>\n      <div css={formStyle}>\n        <Form />\n      </div>\n    </div>\n  );\n}\n\nconst desktop = 1200;\n\nconst welcome = css`\n  background-color: #585858;\n  font-size: 14px;\n  color: #ffffff;\n  padding: 2em;\n  h1 {\n    font-size: 24px;\n    font-weight: 700;\n    font-family: Roboto, sans-serif;\n  }\n  @media (min-width: ${desktop}px) {\n    height: 100vh;\n    width: 58%;\n    display: inline-block;\n    float: left;\n  }\n`;\n\nconst imageStyle = css`\n  margin: 32px auto;\n  height: 26px;\n  width: 177px;\n`;\n\nconst formStyle = css`\n  margin: 32px auto;\n  margin-left: 10%;\n  margin-right: auto;\n  @media (min-width: ${desktop}px) {\n    width: 38%;\n    margin 114px auto;\n    padding: 24px;\n    display: inline-block;\n  }\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/White_Arrow.7ef17c69.svg\";"],"sourceRoot":""}